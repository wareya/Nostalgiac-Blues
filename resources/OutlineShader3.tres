[gd_resource type="Shader" format=2]

[resource]
code = "/*
	シルエットシェーダー by あるる（きのもと 結衣）
	Silhouette Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode depth_draw_never, depth_test_disable, unshaded, cull_disabled;

uniform vec4 color : hint_color = vec4( 0.05, 0.17, 1.0, 1.0 );
uniform float bias = -1.5;

varying mat4 camera_matrix;

void vertex( )
{
	camera_matrix = CAMERA_MATRIX;
}

void fragment( )
{
	vec4 screen_pixel_vertex = vec4( vec3( SCREEN_UV, textureLod( DEPTH_TEXTURE, SCREEN_UV, 0.0 ).x ) * 2.0 - 1.0, 1.0 );
	vec4 screen_pixel_coord = INV_PROJECTION_MATRIX * screen_pixel_vertex;
	screen_pixel_coord.xyz /= screen_pixel_coord.w;
	float depth = -screen_pixel_coord.z;

	float z = -VERTEX.z;

    vec2 px = SCREEN_UV * VIEWPORT_SIZE;
	ALBEDO = OUTPUT_IS_SRGB ? pow(color.rgb, vec3(0.5, 0.5, 0.5)) : color.rgb;
	ALPHA = color.a * float( depth < z + bias );
    if (floor(fract(px.x/2.0)*2.0) == floor(fract(px.y/2.0)*2.0))
        ALPHA *= 0.0;
}

"
