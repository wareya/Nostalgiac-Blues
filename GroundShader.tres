[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeExpression" id=10]
size = Vector2( 250, 150 )
expression = "o = clamp((-0.71+abs(v.y)) * 10.0, -0.5, 0.5)+0.5"

[sub_resource type="VisualShaderNodeExpression" id=11]
size = Vector2( 540, 191 )
expression = "o = clamp((abs(v.z) - abs(v.x)) * 10.0, -0.5, 0.5)+0.5"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=12]

[sub_resource type="VisualShaderNodeVectorScalarMix" id=13]

[sub_resource type="VisualShaderNodeExpression" id=14]
size = Vector2( 250, 150 )
expression = "o = vec3(v.x, -v.y, 0)"

[sub_resource type="VisualShaderNodeExpression" id=15]
size = Vector2( 250, 150 )
expression = "o = vec3(v.z, -v.y, 0)"

[sub_resource type="VisualShaderNodeVectorOp" id=20]
default_input_values = [ 0, Vector3( 0.5, 0.5, 0.5 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=21]
uniform_name = "SideTextureA"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=22]
uniform_name = "SideTextureB"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=23]
uniform_name = "TextureUniform"
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=5]

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 250, 150 )
expression = "o = vec3(v.x, v.z, 0)"

[sub_resource type="VisualShaderNodeTransformVecMult" id=7]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "normal"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, ensure_correct_normals;

uniform sampler2D SideTextureB : hint_albedo;
uniform sampler2D SideTextureA : hint_albedo;
uniform sampler2D TextureUniform : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	mat4 n_out4p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:5
	vec3 n_out5p0 = (n_out4p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorOp:20
	vec3 n_in20p1 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out20p0 = n_out5p0 * n_in20p1;

// Expression:15
	vec3 n_out15p0;
	n_out15p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out15p0 = vec3(n_out20p0.z, -n_out20p0.y, 0)
	}

// TextureUniform:22
	vec3 n_out22p0;
	float n_out22p1;
	{
		vec4 n_tex_read = texture(SideTextureB, n_out15p0.xy);
		n_out22p0 = n_tex_read.rgb;
		n_out22p1 = n_tex_read.a;
	}

// Expression:14
	vec3 n_out14p0;
	n_out14p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out14p0 = vec3(n_out20p0.x, -n_out20p0.y, 0)
	}

// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(SideTextureA, n_out14p0.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// Input:8
	mat4 n_out8p0 = INV_CAMERA_MATRIX;

// Input:9
	vec3 n_out9p0 = NORMAL;

// TransformVectorMult:7
	vec3 n_out7p0 = (vec4(n_out9p0, 1.0) * n_out8p0).xyz;

// Expression:11
	float n_out11p0;
	n_out11p0 = 0.0;
	{
		n_out11p0 = clamp((abs(n_out7p0.z) - abs(n_out7p0.x)) * 10.0, -0.5, 0.5)+0.5
	}

// VectorScalarMix:13
	vec3 n_out13p0 = mix(n_out22p0, n_out21p0, n_out11p0);

// Expression:6
	vec3 n_out6p0;
	n_out6p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out6p0 = vec3(n_out20p0.x, n_out20p0.z, 0)
	}

// TextureUniform:23
	vec3 n_out23p0;
	float n_out23p1;
	{
		vec4 n_tex_read = texture(TextureUniform, n_out6p0.xy);
		n_out23p0 = n_tex_read.rgb;
		n_out23p1 = n_tex_read.a;
	}

// Expression:10
	float n_out10p0;
	n_out10p0 = 0.0;
	{
		n_out10p0 = clamp((-0.71+abs(n_out7p0.y)) * 10.0, -0.5, 0.5)+0.5
	}

// VectorScalarMix:12
	vec3 n_out12p0 = mix(n_out13p0, n_out23p0, n_out10p0);

// Output:0
	ALBEDO = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 318.508, 73.8527 )
flags/ensure_correct_normals = true
nodes/fragment/0/position = Vector2( 1040, 140 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -1000, 280 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -920, 160 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -720, 100 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -280, 80 )
nodes/fragment/6/size = Vector2( 250, 150 )
nodes/fragment/6/input_ports = "0,1,v;"
nodes/fragment/6/output_ports = "0,1,o;"
nodes/fragment/6/expression = "o = vec3(v.x, v.z, 0)"
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -560, 480 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -780, 380 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -760, 720 )
nodes/fragment/10/node = SubResource( 10 )
nodes/fragment/10/position = Vector2( -260, 360 )
nodes/fragment/10/size = Vector2( 250, 150 )
nodes/fragment/10/input_ports = "0,1,v;"
nodes/fragment/10/output_ports = "0,0,o;"
nodes/fragment/10/expression = "o = clamp((-0.71+abs(v.y)) * 10.0, -0.5, 0.5)+0.5"
nodes/fragment/11/node = SubResource( 11 )
nodes/fragment/11/position = Vector2( -280, 560 )
nodes/fragment/11/size = Vector2( 540, 191 )
nodes/fragment/11/input_ports = "0,1,v;"
nodes/fragment/11/output_ports = "0,0,o;"
nodes/fragment/11/expression = "o = clamp((abs(v.z) - abs(v.x)) * 10.0, -0.5, 0.5)+0.5"
nodes/fragment/12/node = SubResource( 12 )
nodes/fragment/12/position = Vector2( 500, 240 )
nodes/fragment/13/node = SubResource( 13 )
nodes/fragment/13/position = Vector2( 580, -80 )
nodes/fragment/14/node = SubResource( 14 )
nodes/fragment/14/position = Vector2( -200, -380 )
nodes/fragment/14/size = Vector2( 250, 150 )
nodes/fragment/14/input_ports = "0,1,v;"
nodes/fragment/14/output_ports = "0,1,o;"
nodes/fragment/14/expression = "o = vec3(v.x, -v.y, 0)"
nodes/fragment/15/node = SubResource( 15 )
nodes/fragment/15/position = Vector2( -240, -200 )
nodes/fragment/15/size = Vector2( 250, 150 )
nodes/fragment/15/input_ports = "0,1,v;"
nodes/fragment/15/output_ports = "0,1,o;"
nodes/fragment/15/expression = "o = vec3(v.z, -v.y, 0)"
nodes/fragment/20/node = SubResource( 20 )
nodes/fragment/20/position = Vector2( -520, -60 )
nodes/fragment/21/node = SubResource( 21 )
nodes/fragment/21/position = Vector2( 400, -500 )
nodes/fragment/22/node = SubResource( 22 )
nodes/fragment/22/position = Vector2( 320, -260 )
nodes/fragment/23/node = SubResource( 23 )
nodes/fragment/23/position = Vector2( 300, 40 )
nodes/fragment/connections = PoolIntArray( 9, 0, 7, 1, 8, 0, 7, 0, 7, 0, 10, 0, 11, 0, 13, 2, 10, 0, 12, 2, 7, 0, 11, 0, 4, 0, 5, 0, 3, 0, 5, 1, 5, 0, 20, 0, 20, 0, 6, 0, 20, 0, 15, 0, 20, 0, 14, 0, 14, 0, 21, 0, 21, 0, 13, 1, 15, 0, 22, 0, 22, 0, 13, 0, 12, 0, 0, 0, 6, 0, 23, 0, 13, 0, 12, 0, 23, 0, 12, 1 )
